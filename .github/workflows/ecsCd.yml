name: Deploy Spring Boot to ECS (Fargate)

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: spring-app
  ECS_CLUSTER: prod-cluster
  ECS_SERVICE: spring-service
  IMAGE_TAG: latest
  CONTAINER_NAME: spring-container

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create resources folder if not exists
        run: mkdir -p ./src/main/resources

      - name: Create application.yml from GitHub Secret
        run: echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml

      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          java-version: '23'

      - name: Build Spring Boot app
        run: ./gradlew clean build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get AWS Account ID
        id: aws-account
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
          echo "::set-output name=account_id::$ACCOUNT_ID"

      - name: Build and push Docker image to ECR
        run: |
          IMAGE_URI=${{ steps.aws-account.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}
          docker build -t $IMAGE_URI:$IMAGE_TAG .
          docker push $IMAGE_URI:$IMAGE_TAG
          echo "IMAGE_URI=$IMAGE_URI:$IMAGE_TAG" >> $GITHUB_ENV
          echo "::set-output name=image_uri::$IMAGE_URI:$IMAGE_TAG"

      - name: Replace placeholders in ecs-task-def.json
        run: |
          sed -i "s|<ACCOUNT_ID>|${{ steps.aws-account.outputs.account_id }}|g" ecs-task-def.json
          sed -i "s|<IMAGE_URI>|${{ steps.build-and-push.outputs.image_uri }}|g" ecs-task-def.json
          cat ecs-task-def.json

      - name: Register new ECS task definition
        id: register-task
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://ecs-task-def.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN"
          echo "::set-output name=task_definition_arn::$TASK_DEF_ARN"

      - name: Deploy to ECS (Fargate)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE }}
          task-definition: ${{ steps.register-task.outputs.task_definition_arn }}
          wait-for-service-stability: true
